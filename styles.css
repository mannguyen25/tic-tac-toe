/* 1. Use a more-intuitive box-sizing model */
*, *::before, *::after {
    box-sizing: border-box;
  }
  
  /* 2. Remove default margin */
  * {
    margin: 0;
  }
  
  body {
    /* 3. Add accessible line-height */
    line-height: 1.5;
    /* 4. Improve text rendering */
    -webkit-font-smoothing: antialiased;
  }
  
  /* 5. Improve media defaults */
  img, picture, video, canvas, svg {
    display: block;
    max-width: 100%;
  }
  
  /* 6. Inherit fonts for form controls */
  input, button, textarea, select {
    font: inherit;
  }
  
  /* 7. Avoid text overflows */
  p, h1, h2, h3, h4, h5, h6 {
    overflow-wrap: break-word;
  }
  
  /* 8. Improve line wrapping */
  p {
    text-wrap: pretty;
  }
  h1, h2, h3, h4, h5, h6 {
    text-wrap: balance;
  }
  
  /*
    9. Create a root stacking context
  */
  #root, #__next {
    isolation: isolate;
  }

  /* Styling Below */

  :root {
    --primary-background-color: #262626;
    --primary-text-color: #A6A6A6;
    --secondary-background-color: #595959;
    --secondary-text-color: #F2F2F2;
  }

  @media screen and (min-width: 400px){
    body {
      background-color: var(--primary-background-color);
      color: var(--primary-text-color);
      font-family: "Funnel Display", sans-serif;
      font-size: 18px;
      min-height: 100vh;
      min-width: 400px;
      overflow: hidden;
      display: flex;
      flex-direction: column;
    }
  
    header {
      flex: 0;
      background-color: var(--secondary-background-color);
      color: var(--secondary-text-color);
      display: grid;
      grid-template-columns: 1fr 2fr 1fr;
      align-items: center;
      justify-items: center;
      padding: 1rem;
      .logo-container {
        display: flex;
        align-items: center;
        min-width: 250px;
        gap: 1rem;
        grid-column: 2 / span 1;
        & img {
          width: 40px;
          height: 40px;
        }
  
      }
      #reset {
        position: relative;
        display: block;
        text-transform: uppercase;
        padding: 10px 20px;
        border: none;
        color: var(--secondary-text-color);
        background-color: var(--secondary-background-color);
        font-size: larger;
        font-weight: 600;
        transition: .5s;
        z-index: 1;
        &:before {
          content: '';
          position: absolute;
          top: 0;
          left: 0;
          width: 100%;
          height: 100%;
          border-top: 2px solid var(--primary-text-color);
          border-bottom: 2px solid var(--primary-text-color);
          transform: scaleY(2);
          opacity: 0;
          transition: .3s;
        }
        &:after {
          content: '';
          position: absolute;
          top: 2px;
          left: 0;
          width: 100%;
          height: 100%;
          background-color: var(--secondary-background-color);
          transform: scale(0);
          opacity: 0;
          transition: .3s;
          z-index: -1;
        }
        &:hover {
          color: var(--primary-text-color);
          &:before {
            transform: scaleY(1);
            opacity: 1;
          }
          &:after {
            transform: scaleY(1);
            opacity: 1;
          }
        }
      }
    }
  
  main {
    flex: 1;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    gap: 1rem;
  }
  
  .board {
    width: clamp(200px, 50vh, 400px);
    height: clamp(200px, 50vh, 400px);
    display: grid;
    grid-template-columns: repeat(3, 1fr);
    grid-template-rows: repeat(3, 1fr);
    padding: 1rem;
    gap: 1rem;
  }
  .cell {
    text-transform: uppercase;
    background-color: var(--primary-text-color);
    color: var(--primary-background-color);
    font-size: 80px;
    display: flex;
    justify-content: center;
    align-items: center;
    transition: all 0.5s ease;
    &:hover {
    transform: scale(1.05);
    box-shadow: 0 0 20px var(--secondary-background-color);
  }
  }
  .player-info {
    border: 4px solid var(--primary-text-color);
    padding: 2rem;
  }
  /* style modal */
  #modal {
    background-color: var(--primary-background-color);
    color: var(--primary-text-color);
    border-radius: 8px;
    padding: 2rem;
    top: 50%;
    left: 50%;
    -webkit-transform: translateX(-50%) translateY(-50%);
    -moz-transform: translateX(-50%) translateY(-50%);
    -ms-transform: translateX(-50%) translateY(-50%);
    transform: translateX(-50%) translateY(-50%);
    min-width: 400px;
  }
  .game-alert {
    display: flex;
    flex-direction: column;
    justify-content: center;
    align-items: center;
    gap: 1rem;
  }
  #close-btn {
    background-color: var(--primary-background-color);
    color: var(--primary-text-color);
    border: 4px solid var(--primary-text-color);
    border-radius: 50%;
    padding: 0.5rem;
    cursor: pointer;
    border-radius: 8px;
    margin-top: 8px;
    outline: none;
    align-self: stretch;
    &:hover {
      background-color: var(--secondary-background-color);
      color: var(--secondary-text-color);
    }
  }
  
  /* Open state of the dialog  */
  dialog:open {
    opacity: 1;
    transform: scaleY(1);
  }
  
  /* Closed state of the dialog   */
  dialog {
    opacity: 0;
    transform: scaleY(0);
    transition:
      opacity 0.7s ease-out,
      transform 0.7s ease-out,
      overlay 0.7s ease-out allow-discrete,
      display 0.7s ease-out allow-discrete;
    /* Equivalent to
    transition: all 0.7s allow-discrete; */
  }
  
  /* Before open state  */
  /* Needs to be after the previous dialog:open rule to take effect,
      as the specificity is the same */
  @starting-style {
    dialog:open {
      opacity: 0;
      transform: scaleY(0);
    }
  }
  
  /* Transition the :backdrop when the dialog modal is promoted to the top layer */
  dialog::backdrop {
    background-color: rgb(0 0 0 / 0%);
    transition:
      display 0.7s allow-discrete,
      overlay 0.7s allow-discrete,
      background-color 0.7s;
    /* Equivalent to
    transition: all 0.7s allow-discrete; */
  }
  
  dialog:open::backdrop {
    background-color: rgb(0 0 0 / 50%);
  }
  
  /* This starting-style rule cannot be nested inside the above selector
  because the nesting selector cannot represent pseudo-elements. */
  
  @starting-style {
    dialog:open::backdrop {
      background-color: rgb(0 0 0 / 0%);
    }
  }
  }